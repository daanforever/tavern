require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InstancesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Instance. As you add validations to Instance, be sure to
  # adjust the attributes here as well.
  let(:environment){ create(:environment) }
  let(:component){ create(:component) }

  let(:valid_attributes) { attributes_for(:instance) }
  let(:valid_request){ 
    { instance: valid_attributes, environment_id: valid_attributes[:environment_id] } 
  }

  let(:invalid_attributes){
    attributes_for(:instance, host_id: nil)
  }
  let(:invalid_request){
    { instance: invalid_attributes, environment_id: invalid_attributes[:environment_id] } 
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InstancesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all instances as @instances" do
      instance = create(:instance, environment_id: environment.to_param)
      get :index, {environment_id: environment.to_param}, valid_session
      expect(assigns(:instances)).to eq([instance])
    end
  end

  describe "GET show" do
    it "assigns the requested instance as @instance" do
      instance = Instance.create! valid_attributes
      get :show, {:id => instance.to_param}, valid_session
      expect(assigns(:instance)).to eq(instance)
    end
  end

  describe "GET new" do
    context 'for environment' do
      it 'assigns a new instance as @instance' do
        get :new, { environment_id: environment.id }, valid_session
        expect(assigns(:instance)).to be_a_new(Instance)
      end
      it 'assigns a components as @environment' do
        get :new, { environment_id: environment.id }, valid_session
        expect(assigns(:environment)).to_not be(nil)
      end
    end
  end

  describe "GET edit" do
    it "assigns the requested instance as @instance" do
      instance = Instance.create! valid_attributes
      get :edit, {:id => instance.to_param}, valid_session
      expect(assigns(:instance)).to eq(instance)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Instance" do
        expect {
          post :create, valid_request, valid_session
        }.to change(Instance, :count).by(1)
      end

      it "assigns a newly created instance as @instance" do
        post :create, valid_request, valid_session
        expect(assigns(:instance)).to be_a(Instance)
        expect(assigns(:instance)).to be_persisted
      end

      it "redirects to the created instance" do
        post :create, valid_request, valid_session
        expect(response).to redirect_to(environment_instances_path(valid_attributes[:environment_id]))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved instance as @instance" do
        post :create, invalid_request, valid_session
        expect(assigns(:instance)).to be_a_new(Instance)
      end

      it "re-renders the 'new' template" do
        post :create, invalid_request, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        attributes_for(:instance)
      }

      it "updates the requested instance" do
        instance = Instance.create! valid_attributes
        put :update, {:id => instance.to_param, :instance => new_attributes}, valid_session
        instance.reload
        expect(assigns(:instance).name).to eq(new_attributes[:name])
      end

      it "assigns the requested instance as @instance" do
        instance = Instance.create! valid_attributes
        put :update, {:id => instance.to_param, :instance => valid_attributes}, valid_session
        expect(assigns(:instance)).to eq(instance)
      end

      it "redirects to the instance" do
        instance = Instance.create! valid_attributes
        put :update, {:id => instance.to_param, :instance => valid_attributes}, valid_session
        expect(response).to redirect_to(instance)
      end
    end

    describe "with invalid params" do
      it "assigns the instance as @instance" do
        instance = Instance.create! valid_attributes
        put :update, {:id => instance.to_param, :instance => invalid_attributes}, valid_session
        expect(assigns(:instance)).to eq(instance)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested instance" do
      instance = Instance.create! valid_attributes
      expect {
        delete :destroy, {:id => instance.to_param}, valid_session
      }.to change(Instance, :count).by(-1)
    end

    it "redirects to the instances list" do
      instance = Instance.create! valid_attributes
      delete :destroy, {:id => instance.to_param}, valid_session
      expect(response).to redirect_to(projects_url)
    end
  end

end
